// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  name         String?
  username     String    @unique
  mobile       String?
  role         String    @default("client") // "admin" or "client"
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  
  // User data relationships
  questionnaire     Questionnaire?
  financialGoals    FinancialGoals?
  medicalInsurance  MedicalInsurance?
  demandDeposits    DemandDeposits?
  lifeInsurance     LifeInsurance?
  timeDeposits      TimeDeposits?
  recurringDeposits RecurringDeposits?
  bonds             Bonds?
  ppf               PPF?
  goldJewellery     GoldJewellery?
  mutualFunds       MutualFunds?
  equities          Equities?
  realEstate        RealEstate?
  cashFlow          CashFlow?
  netWorth          NetWorth?
}

model Questionnaire {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  personal  Json
  family    Json
  employment Json
  income    Json
  liabilities Json
  insurance Json
  goals     Json
  investments Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model FinancialGoals {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  goals       Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model MedicalInsurance {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  policies    Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model DemandDeposits {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  accounts    Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model LifeInsurance {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  policies    Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model TimeDeposits {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  deposits    Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model RecurringDeposits {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  deposits    Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Bonds {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  investments Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model PPF {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  accounts    Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model GoldJewellery {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  items       Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model MutualFunds {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  investments Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Equities {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  investments Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model RealEstate {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  properties  Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model CashFlow {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  statements  Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model NetWorth {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  assets      Json
  liabilities Json
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}